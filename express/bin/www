#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express:server');
var http = require('http');
var Gun = require('gun');
var rest = require("../rest");
var moment = require('moment');

var tracker = require('../tracker.ts');
var indicators = require('../indicators');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

server.listen(port);
var gun = Gun({file: 'data.json', web: server});
var todos = gun.get('todos');
var from = "BTC";
var to = "USD";
var options = {
  host: "query.yahooapis.com",
  port: 443,
  path: "/v1/public/yql?q=select%20*%20from%20yahoo.finance.xchange%20where%20pair%20in%20(%22"+from+to+"%22)&format=json&diagnostics=true&env=store%3A%2F%2Fdatatables.org%2Falltableswithkeys&callback=",
  method: "GET",
  headers: {
    'Content-Type': 'application/JSON'
  }
};

/**
 * Setup tracker indicators.
 */

tracker.addIndicator(indicators.MOVING_AVERAGE, 5, "simple");

console.log("setting interval");
setInterval(getJSON, 1000);

function getJSON() {
  rest.getJSON(options, onJSON);
}

function onJSON(statusCode, result) {
  var rate = result.query.results.rate.Rate;
  console.log(rate);
  var time = moment().valueOf();
  todos.get('rates').get(time).put(rate);
  todos.get('times').get(time%10).put(time);

  tracker.addEntry(parseInt(rate));
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
